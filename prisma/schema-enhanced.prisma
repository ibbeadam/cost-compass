generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Enhanced User Role System for Multi-Property Management
enum UserRole {
  super_admin       // Platform-wide access across all properties
  property_owner    // Owner of one or more properties
  property_admin    // Admin access to specific properties
  regional_manager  // Manager across multiple properties in a region
  property_manager  // Manager of a specific property
  supervisor        // Supervisor level access within properties
  user              // Basic user access
  readonly          // Read-only access
}

// Enhanced User Model with Security Features
model User {
  id                    Int                 @id @default(autoincrement())
  name                  String?
  email                 String              @unique
  department            String?
  phoneNumber           String?             @map("phone_number")
  role                  UserRole            @default(user)
  password              String?
  isActive              Boolean             @default(true) @map("is_active")
  
  // Enhanced Security Fields
  passwordChangedAt     DateTime?           @map("password_changed_at")
  lastLoginAt           DateTime?           @map("last_login_at")
  loginAttempts         Int                 @default(0) @map("login_attempts")
  lockedUntil           DateTime?           @map("locked_until")
  twoFactorEnabled      Boolean             @default(false) @map("two_factor_enabled")
  twoFactorSecret       String?             @map("two_factor_secret")
  
  // Property Ownership and Management
  ownedProperties       Property[]          @relation("PropertyOwner")
  managedProperties     Property[]          @relation("PropertyManager")
  
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  
  // Relations
  accounts              Account[]
  sessions              Session[]
  userPermissions       UserPermission[]
  propertyAccess        PropertyAccess[]
  auditLogs             AuditLog[]
  grantedPermissions    UserPermission[]    @relation("GrantedBy")
  grantedPropertyAccess PropertyAccess[]    @relation("GrantedBy")

  @@map("users")
}

// Property Model (renamed from Outlet for multi-property support)
model Property {
  id                  Int                 @id @default(autoincrement())
  name                String
  propertyCode        String              @unique @map("property_code")
  propertyType        PropertyType        @default(restaurant) @map("property_type")
  address             String?
  city                String?
  state               String?
  country             String?
  timeZone            String?             @map("time_zone")
  currency            String              @default("USD")
  isActive            Boolean             @default(true) @map("is_active")
  
  // Property Ownership and Management
  ownerId             Int?                @map("owner_id")
  managerId           Int?                @map("manager_id")
  owner               User?               @relation("PropertyOwner", fields: [ownerId], references: [id])
  manager             User?               @relation("PropertyManager", fields: [managerId], references: [id])
  
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  
  // Relations
  beverageCostEntries BeverageCostEntry[]
  foodCostEntries     FoodCostEntry[]
  dailyFinancialSummaries DailyFinancialSummary[]
  propertyAccess      PropertyAccess[]
  outlets             Outlet[]            // Properties can have multiple outlets/locations

  @@index([ownerId])
  @@index([managerId])
  @@map("properties")
}

enum PropertyType {
  restaurant
  hotel
  cafe
  bar
  catering
  franchise
  chain
  other
}

// Outlet Model (now belongs to Property for multi-location properties)
model Outlet {
  id                  Int                 @id @default(autoincrement())
  name                String
  outletCode          String              @unique @map("outlet_code")
  propertyId          Int                 @map("property_id")
  address             String?
  isActive            Boolean             @default(true) @map("is_active")
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  
  property            Property            @relation(fields: [propertyId], references: [id])
  beverageCostEntries BeverageCostEntry[]
  foodCostEntries     FoodCostEntry[]

  @@index([propertyId])
  @@map("outlets")
}

// Granular Permission System
model Permission {
  id                    Int                 @id @default(autoincrement())
  name                  String              @unique
  description           String?
  category              PermissionCategory
  resource              String              // e.g., "food_cost", "users", "reports", "properties"
  action                PermissionAction    // e.g., "create", "read", "update", "delete"
  createdAt             DateTime            @default(now()) @map("created_at")
  
  rolePermissions       RolePermission[]
  userPermissions       UserPermission[]

  @@unique([resource, action])
  @@map("permissions")
}

enum PermissionCategory {
  SYSTEM_ADMIN
  USER_MANAGEMENT
  PROPERTY_MANAGEMENT
  FINANCIAL_DATA
  REPORTING
  OUTLET_MANAGEMENT
  COST_INPUT
  DASHBOARD_ACCESS
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  APPROVE
  EXPORT
  IMPORT
  MANAGE
  VIEW_ALL      // View across all properties
  VIEW_OWN      // View only owned properties
}

// Role-Permission Mapping
model RolePermission {
  id                    Int                 @id @default(autoincrement())
  role                  UserRole
  permissionId          Int                 @map("permission_id")
  permission            Permission          @relation(fields: [permissionId], references: [id])
  
  @@unique([role, permissionId])
  @@map("role_permissions")
}

// User-Specific Permission Overrides
model UserPermission {
  id                    Int                 @id @default(autoincrement())
  userId                Int                 @map("user_id")
  permissionId          Int                 @map("permission_id")
  granted               Boolean             @default(true)
  expiresAt             DateTime?           @map("expires_at")
  grantedBy             Int?                @map("granted_by")
  
  user                  User                @relation(fields: [userId], references: [id])
  permission            Permission          @relation(fields: [permissionId], references: [id])
  grantedByUser         User?               @relation("GrantedBy", fields: [grantedBy], references: [id])
  
  @@unique([userId, permissionId])
  @@map("user_permissions")
}

// Property-Specific Access Control
model PropertyAccess {
  id                    Int                 @id @default(autoincrement())
  userId                Int                 @map("user_id")
  propertyId            Int                 @map("property_id")
  accessLevel           PropertyAccessLevel @default(read_only)
  grantedAt             DateTime            @default(now()) @map("granted_at")
  grantedBy             Int                 @map("granted_by")
  expiresAt             DateTime?           @map("expires_at")
  
  user                  User                @relation(fields: [userId], references: [id])
  property              Property            @relation(fields: [propertyId], references: [id])
  grantedByUser         User                @relation("GrantedBy", fields: [grantedBy], references: [id])

  @@unique([userId, propertyId])
  @@index([propertyId])
  @@index([grantedBy])
  @@map("property_access")
}

enum PropertyAccessLevel {
  read_only
  data_entry
  management
  full_control
  owner
}

// Comprehensive Audit Logging
model AuditLog {
  id                    Int                 @id @default(autoincrement())
  userId                Int?                @map("user_id")
  propertyId            Int?                @map("property_id")
  action                String
  resource              String
  resourceId            String?             @map("resource_id")
  details               Json?
  ipAddress             String?             @map("ip_address")
  userAgent             String?             @map("user_agent")
  timestamp             DateTime            @default(now())
  
  user                  User?               @relation(fields: [userId], references: [id])
  property              Property?           @relation(fields: [propertyId], references: [id])

  @@index([userId, timestamp])
  @@index([propertyId, timestamp])
  @@index([resource, resourceId])
  @@index([timestamp])
  @@map("audit_logs")
}

// Updated Category Model
model Category {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String?
  type                String              // "Food" or "Beverage"
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  beverageCostDetails BeverageCostDetail[]
  foodCostDetails     FoodCostDetail[]

  @@map("categories")
}

// Updated Food Cost Entry with Property Support
model FoodCostEntry {
  id             Int              @id @default(autoincrement())
  date           DateTime
  propertyId     Int?             @map("property_id")
  outletId       Int              @map("outlet_id")
  totalFoodCost  Float            @map("total_food_cost")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  
  details        FoodCostDetail[]
  property       Property?        @relation(fields: [propertyId], references: [id])
  outlet         Outlet           @relation(fields: [outletId], references: [id])

  @@index([propertyId])
  @@index([outletId])
  @@index([date])
  @@map("food_cost_entries")
}

model FoodCostDetail {
  id              Int           @id @default(autoincrement())
  foodCostEntryId Int           @map("food_cost_entry_id")
  categoryId      Int           @map("category_id")
  categoryName    String?       @map("category_name")
  cost            Float
  description     String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  category        Category      @relation(fields: [categoryId], references: [id])
  foodCostEntry   FoodCostEntry @relation(fields: [foodCostEntryId], references: [id])

  @@index([categoryId])
  @@index([foodCostEntryId])
  @@map("food_cost_details")
}

// Updated Beverage Cost Entry with Property Support
model BeverageCostEntry {
  id                Int                  @id @default(autoincrement())
  date              DateTime
  propertyId        Int?                 @map("property_id")
  outletId          Int                  @map("outlet_id")
  totalBeverageCost Float                @map("total_beverage_cost")
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  
  details           BeverageCostDetail[]
  property          Property?            @relation(fields: [propertyId], references: [id])
  outlet            Outlet               @relation(fields: [outletId], references: [id])

  @@index([propertyId])
  @@index([outletId])
  @@index([date])
  @@map("beverage_cost_entries")
}

model BeverageCostDetail {
  id                  Int               @id @default(autoincrement())
  beverageCostEntryId Int               @map("beverage_cost_entry_id")
  categoryId          Int               @map("category_id")
  categoryName        String?           @map("category_name")
  cost                Float
  description         String?
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  
  beverageCostEntry   BeverageCostEntry @relation(fields: [beverageCostEntryId], references: [id])
  category            Category          @relation(fields: [categoryId], references: [id])

  @@index([beverageCostEntryId])
  @@index([categoryId])
  @@map("beverage_cost_details")
}

// Updated Daily Financial Summary with Property Support
model DailyFinancialSummary {
  id                        Int      @id @default(autoincrement())
  date                      DateTime
  propertyId                Int?     @map("property_id")
  actualFoodRevenue         Float    @map("actual_food_revenue")
  budgetFoodRevenue         Float    @map("budget_food_revenue")
  actualFoodCost            Float?   @map("actual_food_cost")
  budgetFoodCost            Float    @map("budget_food_cost")
  actualFoodCostPct         Float?   @map("actual_food_cost_pct")
  budgetFoodCostPct         Float    @map("budget_food_cost_pct")
  foodVariancePct           Float?   @map("food_variance_pct")
  entFood                   Float    @map("ent_food")
  coFood                    Float    @map("co_food")
  otherFoodAdjustment       Float    @map("other_food_adjustment")
  actualBeverageRevenue     Float    @map("actual_beverage_revenue")
  budgetBeverageRevenue     Float    @map("budget_beverage_revenue")
  actualBeverageCost        Float?   @map("actual_beverage_cost")
  budgetBeverageCost        Float    @map("budget_beverage_cost")
  actualBeverageCostPct     Float?   @map("actual_beverage_cost_pct")
  budgetBeverageCostPct     Float    @map("budget_beverage_cost_pct")
  beverageVariancePct       Float?   @map("beverage_variance_pct")
  entBeverage               Float    @map("ent_beverage")
  coBeverage                Float    @map("co_beverage")
  otherBeverageAdjustment   Float    @map("other_beverage_adjustment")
  note                      String?
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  property                  Property? @relation(fields: [propertyId], references: [id])

  @@unique([date, propertyId])
  @@index([propertyId])
  @@index([date])
  @@map("daily_financial_summaries")
}